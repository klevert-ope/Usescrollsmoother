{"version":3,"file":"scroll.mjs","sources":["src/useScrollSmoother.ts"],"sourcesContent":["/**\r\n * @file\r\n * useScrollSmoother\r\n * A src for managing smooth scrolling behavior using gsap's ScrollSmoother.\r\n * @copyright (c) 2023 Klevert Opee\r\n * @license ISC\r\n */\r\n\r\nimport gsap from \"gsap\";\r\nimport ScrollSmoother from \"gsap/ScrollSmoother\";\r\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\r\nimport React, {DependencyList, EffectCallback, useEffect, useLayoutEffect, useRef} from \"react\";\r\n\r\ngsap.registerPlugin(ScrollSmoother, ScrollTrigger);\r\n\r\ntype ScrollSmootherConfig = {\r\n\t\t/**\r\n\t\t * smooth - the time (in seconds) that it takes to \"catch up\" to the native scroll position.\r\n\t\t */\r\n\tsmooth: number;\r\n\t\t/**\r\n\t\t *  smoothTouch - by default, ScrollSmoother will NOT apply scroll smoothing on touch-only\r\n\t\t *   devices (like phones) because that typically feels odd to users when it disconnects from their finger's drag\r\n\t\t *   position, but you can force smoothing on touch devices too by setting smoothTouch: true (same as smooth value) or\r\n\t\t *   specify an amount like smoothTouch: 0.1 (in seconds).\r\n\t\t */\r\n\tsmoothTouch: boolean | number;\r\n\t\t/**\r\n\t\t * if true, it forces scrolling to be done on the JavaScript thread,\r\n\t\t * ensuring it is synchronized, and the address bar doesn't show/hide on mobile devices.\r\n\t\t * it debounces because smooth scrolling makes that possible.\r\n\t\t */\r\n\tnormalizeScroll: boolean;\r\n\t\t/**\r\n\t\t * This is ScrollTrigger.normalizeScroll()\r\n\t\t * if true,\r\n\t\t * it forces scrolling to be done on the JavaScript thread,\r\n\t\t * ensuring it is synchronized, and the address bar doesn't show/hide on mobile devices.\r\n\t\t */\r\n\tsnormalizescroll: boolean;\r\n\t\t/**\r\n\t\t * if true,\r\n\t\t * vertical resizes (of 25% of the viewport height) on touch-only devices won't trigger a ScrollTrigger.refresh(),\r\n\t\t * avoiding the jumps that can happen when the start/end values are recalculated.\r\n\t\t * Beware that if you skip the refresh(),\r\n\t\t * the start/end trigger positions may be inaccurate but in many scenarios\r\n\t\t * that are preferable to the visual jumps that occur due to the new start/end positions.\r\n\t\t */\r\n\tignoreMobileResize: boolean;\r\n\t\t/**\r\n\t\t * This is ScrollTrigger.ignoreMobileResize()\r\n\t\t * if true, vertical resizes (of 25% of the viewport height) on touch-only devices won't trigger a ScrollTrigger.refresh(),\r\n\t\t * avoiding the jumps that can happen when the start/end values are recalculated.\r\n\t\t * Beware that if you skip the refresh(),\r\n\t\t * the start/end trigger positions may be inaccurate but in many scenarios\r\n\t\t * that are preferable to the visual jumps that occur due to the new start/end positions.\r\n\t */\r\n\tsignoremobileresize: boolean;\r\n\t\t/**\r\n\t\t * if true, ScrollSmoother will find all elements that have a data-speed\r\n\t\t * and/or data-lag attribute and apply those effects accordingly so that they move at the designated speed or delay,\r\n\t\t * so data-speed=\"0.5\" would scroll at half the normal speed, and data-speed=\"2\" would scroll at twice the normal speed.\r\n\t\t * data-lag=\"0.8\" would take 0.8 seconds to \"catch up\" to the smoothed scroll position. You can also use\r\n\t\t * selector text or an Array of elements, so effects: \".box\" would only look for the attributes on elements with the \".box\" class.\r\n\t\t * You can use the effects() method to apply effects directly via JavaScript instead.\r\n\t\t * See that method's docs for more details about how effects work.\r\n\t\t * Note: effects should not be nested.\r\n\t */\r\n\teffects: EffectsType;\r\n\t\t/**\r\n\t\t * perhaps you're already using data-speed and/or data-lag for other purposes,\r\n\t\t * and you'd like to use a custom prefix for effects data attributes like effectsPrefix:\r\n\t\t * \"scroll-\" would resolve to data-scroll-speed and data-scroll-lag.\r\n\t */\r\n\teffectsPrefix: string;\r\n\t\t/**\r\n\t\t * Normally, effects applied to a particular element begin as soon as the natural\r\n\t\t * position of the element enters the viewport and then end when the natural position leaves the viewport. However, in\r\n\t\t * some rare cases you may want to expand that, so you can pass a number (in pixels) as the effectsPadding.\r\n\t */\r\n\teffectsPadding: number;\r\n\t\t/**\r\n\t\t * the easing function to be used for smooth scrolling. Default is \"expo\".\r\n\t */\r\n\tease: string | (() => void);\r\n\t\t/**\r\n\t\t * a function to call after each time the SmoothScroller updates the position of the content.\r\n\t */\r\n\tonUpdate: () => void;\r\n\t\t/**\r\n\t\t * a function to call when a new element receives focus,\r\n\t\t * and you can return false if you want ScrollSmoother to skip ensuring that the element is in the viewport\r\n\t\t * (overriding that default behavior).\r\n\t */\r\n\tonFocusIn: () => void;\r\n\t\t/**\r\n\t\t * a function to call when the smoothed scroll comes to a stop (catches up to the native scroll position).\r\n\t */\r\n\tonStop: () => void;\r\n};\r\n\r\ntype UseScrollSmootherProps = {\r\n\t/**\r\n\t * Configuration options for the ScrollSmoother.\r\n\t */\r\n\tconfig?: ScrollSmootherConfig;\r\n};\r\n\r\ntype UseScrollSmootherResult = {\r\n\tsmoothWrapperRef: React.RefObject<HTMLDivElement>;\r\n\tsmoothContentRef: React.RefObject<HTMLDivElement>;\r\n};\r\n\r\ntype EffectsType = string | boolean | StringArray | undefined;\r\ntype StringArray = string[];\r\n\r\n/**\r\n * A src for managing smooth scrolling behavior using gsap ScrollSmoother.\r\n *\r\n * @param {UseScrollSmootherProps} props - The properties of ScrollSmoother.create({config});\r\n * @returns {UseScrollSmootherResult} - The result containing refs for smooth wrapper and content.\r\n */\r\nexport function useScrollSmoother({ config }: UseScrollSmootherProps = {}): UseScrollSmootherResult {\r\n\tconst Config: ScrollSmootherConfig = config || ({} as ScrollSmootherConfig);\r\n\r\n\tconst smoothWrapperRef = useRef<HTMLDivElement>(null);\r\n\tconst smoothContentRef = useRef<HTMLDivElement>(null);\r\n\r\n\tlet UseIsomorphicLayoutEffect: (effect: EffectCallback, deps?: DependencyList) => void;\r\n\tif (typeof window !== 'undefined') {\r\n\t\tUseIsomorphicLayoutEffect = useLayoutEffect;\r\n\t} else {\r\n\t\tUseIsomorphicLayoutEffect = useEffect;\r\n\t}\r\n\r\n\tUseIsomorphicLayoutEffect(() => {\r\n\t\tif (!smoothWrapperRef.current || !smoothContentRef.current) {\r\n\t\t\tthrow new Error('Smooth wrapper or content Ref not found. Make sure the refs exist.');\r\n\t\t}\r\n\r\n\t\tconst gsapContext = gsap.context(() => {\r\n\t\t\tScrollTrigger.normalizeScroll(Config.snormalizescroll);\r\n\t\t\tScrollTrigger.config({\r\n\t\t\t\tignoreMobileResize: Config.signoremobileresize,\r\n\t\t\t\tsyncInterval: 100\r\n\t\t\t});\r\n\r\n\t\t\tScrollSmoother.create({\r\n\t\t\t\twrapper: smoothWrapperRef.current,\r\n\t\t\t\tcontent: smoothContentRef.current,\r\n\t\t\t\t...Config\r\n\t\t\t});\r\n\t\t});\r\n\t\treturn () => {\r\n\t\t\tgsapContext.revert();\r\n\t\t};\r\n\t}, []);\r\n\r\n\treturn { smoothWrapperRef, smoothContentRef };\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA,IAAK,CAAA,cAAA,CAAe,gBAAgB,aAAa,CAAA,CAAA;AA6G1C,SAAS,iBAAkB,CAAA,EAAE,MAAO,EAAA,GAA4B,EAA6B,EAAA;AACnG,EAAM,MAAA,MAAA,GAA+B,UAAW,EAAC,CAAA;AAEjD,EAAM,MAAA,gBAAA,GAAmB,OAAuB,IAAI,CAAA,CAAA;AACpD,EAAM,MAAA,gBAAA,GAAmB,OAAuB,IAAI,CAAA,CAAA;AAEpD,EAAI,IAAA,yBAAA,CAAA;AACJ,EAAI,IAAA,OAAO,WAAW,WAAa,EAAA;AAClC,IAA4B,yBAAA,GAAA,eAAA,CAAA;AAAA,GACtB,MAAA;AACN,IAA4B,yBAAA,GAAA,SAAA,CAAA;AAAA,GAC7B;AAEA,EAAA,yBAAA,CAA0B,MAAM;AAC/B,IAAA,IAAI,CAAC,gBAAA,CAAiB,OAAW,IAAA,CAAC,iBAAiB,OAAS,EAAA;AAC3D,MAAM,MAAA,IAAI,MAAM,oEAAoE,CAAA,CAAA;AAAA,KACrF;AAEA,IAAM,MAAA,WAAA,GAAc,IAAK,CAAA,OAAA,CAAQ,MAAM;AACtC,MAAc,aAAA,CAAA,eAAA,CAAgB,OAAO,gBAAgB,CAAA,CAAA;AACrD,MAAA,aAAA,CAAc,MAAO,CAAA;AAAA,QACpB,oBAAoB,MAAO,CAAA,mBAAA;AAAA,QAC3B,YAAc,EAAA,GAAA;AAAA,OACd,CAAA,CAAA;AAED,MAAA,cAAA,CAAe,MAAO,CAAA;AAAA,QACrB,SAAS,gBAAiB,CAAA,OAAA;AAAA,QAC1B,SAAS,gBAAiB,CAAA,OAAA;AAAA,QAC1B,GAAG,MAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACD,CAAA,CAAA;AACD,IAAA,OAAO,MAAM;AACZ,MAAA,WAAA,CAAY,MAAO,EAAA,CAAA;AAAA,KACpB,CAAA;AAAA,GACD,EAAG,EAAE,CAAA,CAAA;AAEL,EAAO,OAAA,EAAE,kBAAkB,gBAAiB,EAAA,CAAA;AAC7C;;;;"}